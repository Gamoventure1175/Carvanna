datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../validation/generated/"
}

//User Schema 
model User {
  //Essential info
  id            Int       @id @default(autoincrement())
  email         String    @unique
  emailVerified DateTime?
  password      String?
  username      String    @unique
  isVerified    Boolean   @default(false)
  role          UserRole  @default(USER)
  oauthOnly     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  onBoarded     Boolean   @default(false)

  //Personal info
  name            String?
  phone           String?
  driversLicense  String? @unique
  profileImageUrl String?
  location        String?

  //Relationships
  cars      Car[]
  reminders ReminderJob[]

  //Many-to-many relationship via UserAccount
  Account  Account[]
  accounts UserAccount[]
  Session  UserSession[]
}

//Defining roles
enum UserRole {
  USER
  ADMIN
}

enum ReminderType {
  SERVICE
  PUC 
  INSURANCE
}

//Car Schema
model Car {
  id           Int      @id @default(autoincrement())
  ownerId      Int
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  brand        String
  model        String
  year         Int
  mileage      Int?
  color        String?
  licensePlate String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  //Relations related to the car services
  serviceLogs ServiceLog[]
  insurance   Insurance[]
  pucChecks   PUCCheck[]
  ReminderJob ReminderJob[]
}

//ServiceType Schema
model ServiceType {
  id           Int    @id @default(autoincrement())
  name         String @unique // e.g., "OIL_CHANGE"
  label        String // e.g., "Oil Change"
  intervalKm   Int? // e.g., every 5000 km
  intervalDays Int? // e.g., every 180 days

  serviceLogs ServiceLog[]
}

//ServiceLog Schema
model ServiceLog {
  id            Int         @id @default(autoincrement())
  carId         Int
  car           Car         @relation(fields: [carId], references: [id], onDelete: Cascade)
  serviceTypeId Int
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  serviceDate   DateTime
  mileageAtTime Int?
  notes         String?

  createdAt DateTime @default(now())
}

//Account schema
model Account {
  id                Int           @id @default(autoincrement())
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  //Many-to-many relationship via UserAccount
  userAccounts      UserAccount[]

  @@unique([provider, providerAccountId])
}

//UserAccount schema
model UserAccount {
  id        Int      @id @default(autoincrement())
  userId    Int
  accountId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

//Session schema
model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String   @unique
  deviceInfo   String?
  ipAddress    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Reminder job schema for bullMQ
model ReminderJob {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  carId       Int
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  type        ReminderType // e.g., "SERVICE", "PUC", "INSURANCE"
  referenceId String // Points to related serviceLog/PUC/insurance
  scheduledAt DateTime
  sent        Boolean  @default(false)

  createdAt DateTime @default(now())
}

//Insurance Schema
model Insurance {
  id          Int      @id @default(autoincrement())
  carId       Int
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  provider    String
  policyNo    String
  startDate   DateTime
  expiryDate  DateTime
  amount      Float?
  documentUrl String?

  createdAt DateTime @default(now())
}

//PUC Schema 
model PUCCheck {
  id          Int      @id @default(autoincrement())
  carId       Int
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  checkedAt   DateTime
  validTill   DateTime
  documentUrl String?

  createdAt DateTime @default(now())
}
