datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../validation/generated/"
}

enum UserRole {
  USER
  ADMIN
}

enum ReminderType {
  SERVICE
  PUC
  INSURANCE
}

// User Schema
model User {
  id              String         @id @default(cuid())
  email           String         @unique
  emailVerified   DateTime?
  password        String?
  username        String         @unique
  isVerified      Boolean        @default(false)
  role            UserRole       @default(USER)
  oauthOnly       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  onBoarded       Boolean        @default(false)

  name            String?
  phone           String?
  driversLicense  String?        @unique
  profileImageUrl String?
  location        String?

  cars            Car[]
  reminders       ReminderJob[]
  Account         Account[]
  accounts        UserAccount[]
  Session         UserSession[]
}

// Car Schema
model Car {
  id           String       @id @default(cuid())
  ownerId      String
  owner        User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  brand        String
  model        String
  year         Int
  mileage      Int?
  color        String?
  licensePlate String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  serviceLogs  ServiceLog[]
  insurance    Insurance[]
  pucChecks    PUCCheck[]
  ReminderJob  ReminderJob[]
}

// ServiceType Schema (Still uses Int since it's a static reference list)
model ServiceType {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  label        String
  intervalKm   Int?
  intervalDays Int?

  serviceLogs  ServiceLog[]
}

// ServiceLog Schema
model ServiceLog {
  id            String       @id @default(cuid())
  carId         String
  car           Car          @relation(fields: [carId], references: [id], onDelete: Cascade)
  serviceTypeId Int
  serviceType   ServiceType  @relation(fields: [serviceTypeId], references: [id])
  serviceDate   DateTime
  mileageAtTime Int?
  notes         String?

  createdAt     DateTime     @default(now())
}

// Account Schema
model Account {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  userAccounts      UserAccount[]

  @@unique([provider, providerAccountId])
}

// UserAccount Schema
model UserAccount {
  id        String    @id @default(cuid())
  userId    String
  accountId String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
}

// Session Schema
model UserSession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String   @unique
  deviceInfo   String?
  ipAddress    String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ReminderJob Schema
model ReminderJob {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  carId       String
  car         Car          @relation(fields: [carId], references: [id], onDelete: Cascade)
  type        ReminderType
  referenceId String
  notes       String?
  scheduledAt DateTime
  sent        Boolean      @default(false)

  createdAt   DateTime     @default(now())
}

// Insurance Schema
model Insurance {
  id          String   @id @default(cuid())
  carId       String
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  provider    String
  policyNo    String
  startDate   DateTime
  expiryDate  DateTime
  amount      Float?
  documentUrl String?

  createdAt   DateTime @default(now())
}

// PUCCheck Schema
model PUCCheck {
  id          String   @id @default(cuid())
  carId       String
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  checkedAt   DateTime
  validTill   DateTime
  documentUrl String?

  createdAt   DateTime @default(now())
}
